// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: campaigns.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createCampaign = `-- name: CreateCampaign :execresult
INSERT INTO campaigns (created_at, updated_at, name)
VALUES (?, ?, ?)
`

type CreateCampaignParams struct {
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
}

func (q *Queries) CreateCampaign(ctx context.Context, arg CreateCampaignParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createCampaign, arg.CreatedAt, arg.UpdatedAt, arg.Name)
}

const deleteCampaign = `-- name: DeleteCampaign :exec
DELETE FROM campaigns WHERE id = ?
`

func (q *Queries) DeleteCampaign(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteCampaign, id)
	return err
}

const getAllCampaigns = `-- name: GetAllCampaigns :many
SELECT id, created_at, updated_at, name FROM campaigns
`

func (q *Queries) GetAllCampaigns(ctx context.Context) ([]Campaign, error) {
	rows, err := q.db.QueryContext(ctx, getAllCampaigns)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Campaign
	for rows.Next() {
		var i Campaign
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOneCampaign = `-- name: GetOneCampaign :one
SELECT id, created_at, updated_at, name FROM campaigns
WHERE id = ? LIMIT 1
`

func (q *Queries) GetOneCampaign(ctx context.Context, id int32) (Campaign, error) {
	row := q.db.QueryRowContext(ctx, getOneCampaign, id)
	var i Campaign
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
	)
	return i, err
}

const updateCampaign = `-- name: UpdateCampaign :execresult
UPDATE campaigns SET name = ?, updated_at = ? WHERE id = ?
`

type UpdateCampaignParams struct {
	Name      string
	UpdatedAt time.Time
	ID        int32
}

func (q *Queries) UpdateCampaign(ctx context.Context, arg UpdateCampaignParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateCampaign, arg.Name, arg.UpdatedAt, arg.ID)
}
