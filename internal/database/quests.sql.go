// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: quests.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const activateQuest = `-- name: ActivateQuest :execresult
UPDATE quests SET is_active = true
WHERE id = ?
`

func (q *Queries) ActivateQuest(ctx context.Context, id int32) (sql.Result, error) {
	return q.db.ExecContext(ctx, activateQuest, id)
}

const createQuest = `-- name: CreateQuest :execresult
INSERT INTO quests (created_at, updated_at, name, description, npc, number, campaign_id)
VALUES (?, ?, ?, ?, ?, ?, ?)
`

type CreateQuestParams struct {
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Name        string
	Description string
	Npc         string
	Number      int32
	CampaignID  int32
}

func (q *Queries) CreateQuest(ctx context.Context, arg CreateQuestParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createQuest,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.Description,
		arg.Npc,
		arg.Number,
		arg.CampaignID,
	)
}

const finishQuest = `-- name: FinishQuest :execresult
UPDATE quests SET is_complete = true
WHERE id = ?
`

func (q *Queries) FinishQuest(ctx context.Context, id int32) (sql.Result, error) {
	return q.db.ExecContext(ctx, finishQuest, id)
}

const getAllCampaignActiveQuests = `-- name: GetAllCampaignActiveQuests :many
SELECT id, created_at, updated_at, name, description, npc, is_complete, is_active, number, campaign_id FROM quests
WHERE campaign_id = ? AND is_active = true
`

func (q *Queries) GetAllCampaignActiveQuests(ctx context.Context, campaignID int32) ([]Quest, error) {
	rows, err := q.db.QueryContext(ctx, getAllCampaignActiveQuests, campaignID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Quest
	for rows.Next() {
		var i Quest
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Description,
			&i.Npc,
			&i.IsComplete,
			&i.IsActive,
			&i.Number,
			&i.CampaignID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllCampaignDoneQuests = `-- name: GetAllCampaignDoneQuests :many
SELECT id, created_at, updated_at, name, description, npc, is_complete, is_active, number, campaign_id FROM quests
WHERE campaign_id = ? AND is_complete = true
`

func (q *Queries) GetAllCampaignDoneQuests(ctx context.Context, campaignID int32) ([]Quest, error) {
	rows, err := q.db.QueryContext(ctx, getAllCampaignDoneQuests, campaignID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Quest
	for rows.Next() {
		var i Quest
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Description,
			&i.Npc,
			&i.IsComplete,
			&i.IsActive,
			&i.Number,
			&i.CampaignID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllCampaignQuests = `-- name: GetAllCampaignQuests :many
SELECT id, created_at, updated_at, name, description, npc, is_complete, is_active, number, campaign_id FROM quests
WHERE campaign_id = ?
`

func (q *Queries) GetAllCampaignQuests(ctx context.Context, campaignID int32) ([]Quest, error) {
	rows, err := q.db.QueryContext(ctx, getAllCampaignQuests, campaignID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Quest
	for rows.Next() {
		var i Quest
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Description,
			&i.Npc,
			&i.IsComplete,
			&i.IsActive,
			&i.Number,
			&i.CampaignID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOneQuest = `-- name: GetOneQuest :one
SELECT id, created_at, updated_at, name, description, npc, is_complete, is_active, number, campaign_id from quests
WHERE id = ? LIMIT 1
`

func (q *Queries) GetOneQuest(ctx context.Context, id int32) (Quest, error) {
	row := q.db.QueryRowContext(ctx, getOneQuest, id)
	var i Quest
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Description,
		&i.Npc,
		&i.IsComplete,
		&i.IsActive,
		&i.Number,
		&i.CampaignID,
	)
	return i, err
}

const reorderQuest = `-- name: ReorderQuest :execresult
UPDATE quests SET number = ?
WHERE id = ?
`

type ReorderQuestParams struct {
	Number int32
	ID     int32
}

func (q *Queries) ReorderQuest(ctx context.Context, arg ReorderQuestParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, reorderQuest, arg.Number, arg.ID)
}

const updateQuest = `-- name: UpdateQuest :execresult
UPDATE quests SET name = ?, description = ?, npc = ?, updated_at = ?
WHERE id = ?
`

type UpdateQuestParams struct {
	Name        string
	Description string
	Npc         string
	UpdatedAt   time.Time
	ID          int32
}

func (q *Queries) UpdateQuest(ctx context.Context, arg UpdateQuestParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateQuest,
		arg.Name,
		arg.Description,
		arg.Npc,
		arg.UpdatedAt,
		arg.ID,
	)
}
